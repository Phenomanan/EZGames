-- MySQL Script generated by MySQL Workbench
-- 08/10/15 00:36:26
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`user` ;

CREATE TABLE IF NOT EXISTS `mydb`.`user` (
  `userID` INT(5) NOT NULL COMMENT '',
  `name` VARCHAR(30) NOT NULL COMMENT '',
  `userType` VARCHAR(10) NOT NULL COMMENT '',
  PRIMARY KEY (`userID`)  COMMENT '',
  UNIQUE INDEX `userID_UNIQUE` (`userID` ASC)  COMMENT '');


-- -----------------------------------------------------
-- Table `mydb`.`customer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`customer` ;

CREATE TABLE IF NOT EXISTS `mydb`.`customer` (
  `customerID` INT(5) NOT NULL COMMENT '',
  `bankNum` INT(16) NOT NULL COMMENT '',
  UNIQUE INDEX `bankNum_UNIQUE` (`bankNum` ASC)  COMMENT '',
  PRIMARY KEY (`customerID`)  COMMENT '',
  UNIQUE INDEX `customerID_UNIQUE` (`customerID` ASC)  COMMENT '',
  CONSTRAINT `cusID`
    FOREIGN KEY (`customerID`)
    REFERENCES `mydb`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`game`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`game` ;

CREATE TABLE IF NOT EXISTS `mydb`.`game` (
  `PID` INT(5) NOT NULL COMMENT '',
  `title` VARCHAR(45) NOT NULL COMMENT '',
  `price` FLOAT NOT NULL COMMENT '',
  `trackingNum` INT(10) NOT NULL COMMENT '',
  PRIMARY KEY (`PID`)  COMMENT '',
  UNIQUE INDEX `PID_UNIQUE` (`PID` ASC)  COMMENT '',
  UNIQUE INDEX `trackingNum_UNIQUE` (`trackingNum` ASC)  COMMENT '',
  INDEX `title` (`title` ASC)  COMMENT '')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`reviewer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`reviewer` ;

CREATE TABLE IF NOT EXISTS `mydb`.`reviewer` (
  `reviewerID` INT(5) NOT NULL COMMENT '',
  PRIMARY KEY (`reviewerID`)  COMMENT '',
  UNIQUE INDEX `reviewerID_UNIQUE` (`reviewerID` ASC)  COMMENT '',
  CONSTRAINT `reviewerID`
    FOREIGN KEY (`reviewerID`)
    REFERENCES `mydb`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`review`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`review` ;

CREATE TABLE IF NOT EXISTS `mydb`.`review` (
  `RevID` INT(5) NOT NULL COMMENT '',
  `authorID` INT(5) NOT NULL COMMENT '',
  `content` VARCHAR(300) NULL COMMENT '',
  `avgRating` DECIMAL(2) NOT NULL COMMENT '',
  `numRatings` INT NOT NULL COMMENT '',
  PRIMARY KEY (`RevID`, `authorID`)  COMMENT '',
  INDEX `RevID_idx` (`authorID` ASC)  COMMENT '',
  UNIQUE INDEX `RevID_UNIQUE` (`RevID` ASC)  COMMENT '',
  CONSTRAINT `authorID`
    FOREIGN KEY (`authorID`)
    REFERENCES `mydb`.`reviewer` (`reviewerID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`seller`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`seller` ;

CREATE TABLE IF NOT EXISTS `mydb`.`seller` (
  `sellerID` INT(5) NOT NULL COMMENT '',
  `bankNum` INT(16) NOT NULL COMMENT '',
  `avgRating` DECIMAL(2) NOT NULL COMMENT '',
  `numRatings` INT(0) NOT NULL COMMENT '',
  UNIQUE INDEX `bankNum_UNIQUE` (`bankNum` ASC)  COMMENT '',
  PRIMARY KEY (`sellerID`)  COMMENT '',
  UNIQUE INDEX `sellerID_UNIQUE` (`sellerID` ASC)  COMMENT '',
  CONSTRAINT `sellerID`
    FOREIGN KEY (`sellerID`)
    REFERENCES `mydb`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`moderator`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`moderator` ;

CREATE TABLE IF NOT EXISTS `mydb`.`moderator` (
  `moderatorID` INT(5) NOT NULL COMMENT '',
  PRIMARY KEY (`moderatorID`)  COMMENT '',
  UNIQUE INDEX `moderatorID_UNIQUE` (`moderatorID` ASC)  COMMENT '',
  CONSTRAINT `moderatorID`
    FOREIGN KEY (`moderatorID`)
    REFERENCES `mydb`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `mydb`.`ratesReview`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ratesReview` ;

CREATE TABLE IF NOT EXISTS `mydb`.`ratesReview` (
  `custID` INT(5) NOT NULL COMMENT '',
  `reviewID` INT(5) NOT NULL COMMENT '',
  `rating` INT(2) NOT NULL COMMENT '',
  PRIMARY KEY (`custID`, `reviewID`)  COMMENT '',
  INDEX `reviewiD_idx` (`reviewID` ASC)  COMMENT '',
  CONSTRAINT `custID`
    FOREIGN KEY (`custID`)
    REFERENCES `mydb`.`customer` (`customerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `revID`
    FOREIGN KEY (`reviewID`)
    REFERENCES `mydb`.`review` (`RevID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`ratesSeller`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`ratesSeller` ;

CREATE TABLE IF NOT EXISTS `mydb`.`ratesSeller` (
  `sID` INT(5) NOT NULL COMMENT '',
  `cID` INT(5) NOT NULL COMMENT '',
  `rating` INT(2) NOT NULL COMMENT '',
  PRIMARY KEY (`sID`, `cID`)  COMMENT '',
  INDEX `customerID_idx` (`cID` ASC)  COMMENT '',
  CONSTRAINT `sID`
    FOREIGN KEY (`sID`)
    REFERENCES `mydb`.`seller` (`sellerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `cID`
    FOREIGN KEY (`cID`)
    REFERENCES `mydb`.`customer` (`customerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`sells`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`sells` ;

CREATE TABLE IF NOT EXISTS `mydb`.`sells` (
  `sellID` INT(5) NOT NULL COMMENT '',
  `salePID` INT(5) NOT NULL COMMENT '',
  PRIMARY KEY (`sellID`, `salePID`)  COMMENT '',
  INDEX `salePID_idx` (`salePID` ASC)  COMMENT '',
  UNIQUE INDEX `salePID_UNIQUE` (`salePID` ASC)  COMMENT '',
  CONSTRAINT `sellID`
    FOREIGN KEY (`sellID`)
    REFERENCES `mydb`.`seller` (`sellerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `salePID`
    FOREIGN KEY (`salePID`)
    REFERENCES `mydb`.`game` (`PID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`buys`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`buys` ;

CREATE TABLE IF NOT EXISTS `mydb`.`buys` (
  `gamID` INT(5) NOT NULL COMMENT '',
  `buyerID` INT(5) NOT NULL COMMENT '',
  INDEX `gamID_idx` (`gamID` ASC)  COMMENT '',
  PRIMARY KEY (`gamID`)  COMMENT '',
  UNIQUE INDEX `gamID_UNIQUE` (`gamID` ASC)  COMMENT '',
  CONSTRAINT `buyerID`
    FOREIGN KEY (`buyerID`)
    REFERENCES `mydb`.`customer` (`customerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `gamID`
    FOREIGN KEY (`gamID`)
    REFERENCES `mydb`.`game` (`PID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`writes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`writes` ;

CREATE TABLE IF NOT EXISTS `mydb`.`writes` (
  `reviewerUID` INT(5) NOT NULL COMMENT '',
  `reviewPID` INT(5) NOT NULL COMMENT '',
  `gamName` VARCHAR(45) NOT NULL COMMENT '',
  INDEX `reviewerID_idx` (`reviewerUID` ASC)  COMMENT '',
  INDEX `reviewID_idx` (`reviewPID` ASC)  COMMENT '',
  PRIMARY KEY (`reviewerUID`, `reviewPID`)  COMMENT '',
  CONSTRAINT `gamName`
    FOREIGN KEY (`gamName`)
    REFERENCES `mydb`.`game` (`title`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `reviewerUID`
    FOREIGN KEY (`reviewerUID`)
    REFERENCES `mydb`.`reviewer` (`reviewerID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `reviewPID`
    FOREIGN KEY (`reviewPID`)
    REFERENCES `mydb`.`review` (`RevID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`edits`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`edits` ;

CREATE TABLE IF NOT EXISTS `mydb`.`edits` (
  `mod` INT(5) NOT NULL COMMENT '',
  `accountID` INT(5) NULL COMMENT '',
  `proID` INT(5) NULL COMMENT '',
  `rrID` INT(5) NULL COMMENT '',
  INDEX `prodID_idx` (`proID` ASC)  COMMENT '',
  INDEX `reID_idx` (`rrID` ASC)  COMMENT '',
  CONSTRAINT `accountID`
    FOREIGN KEY (`accountID`)
    REFERENCES `mydb`.`user` (`userID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `proID`
    FOREIGN KEY (`proID`)
    REFERENCES `mydb`.`game` (`PID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `rrID`
    FOREIGN KEY (`rrID`)
    REFERENCES `mydb`.`review` (`RevID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `mod`
    FOREIGN KEY (`mod`)
    REFERENCES `mydb`.`moderator` (`moderatorID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`follows`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`follows` ;

CREATE TABLE IF NOT EXISTS `mydb`.`follows` (
  `userID1` INT(5) NOT NULL COMMENT '',
  `userID2` INT(5) NOT NULL COMMENT '',
  PRIMARY KEY (`userID1`, `userID2`)  COMMENT '',
  INDEX `userID2_idx` (`userID2` ASC)  COMMENT '',
  CONSTRAINT `userID1`
    FOREIGN KEY (`userID1`)
    REFERENCES `mydb`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `userID2`
    FOREIGN KEY (`userID2`)
    REFERENCES `mydb`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`address` ;

CREATE TABLE IF NOT EXISTS `mydb`.`address` (
  `residentID` INT(5) NOT NULL COMMENT '',
  `street` VARCHAR(45) NOT NULL COMMENT '',
  `state` VARCHAR(2) NOT NULL COMMENT '',
  `zip` INT(5) NOT NULL COMMENT '',
  PRIMARY KEY (`residentID`)  COMMENT '',
  CONSTRAINT `residentID`
    FOREIGN KEY (`residentID`)
    REFERENCES `mydb`.`user` (`userID`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `mydb` ;

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`nonmoderatorViewsGame`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`nonmoderatorViewsGame` (`PID` INT, `title` INT, `price` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`moderatorViewsGame`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`moderatorViewsGame` (`PID` INT, `title` INT, `price` INT, `trackingNum` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`nonModeratorViewsUser`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`nonModeratorViewsUser` (`userID` INT, `name` INT, `userType` INT, `state` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`moderatorViewsUser`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`moderatorViewsUser` (`userID` INT, `name` INT, `userType` INT, `residentID` INT, `street` INT, `state` INT, `zip` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`moderatorViewsReview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`moderatorViewsReview` (`RevID` INT, `authorID` INT, `content` INT, `avgRating` INT, `numRatings` INT);

-- -----------------------------------------------------
-- Placeholder table for view `mydb`.`nonmoderatorViewsReview`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`nonmoderatorViewsReview` (`RevID` INT, `authorID` INT, `content` INT, `avgRating` INT);

-- -----------------------------------------------------
-- View `mydb`.`nonmoderatorViewsGame`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mydb`.`nonmoderatorViewsGame` ;
DROP TABLE IF EXISTS `mydb`.`nonmoderatorViewsGame`;
USE `mydb`;
CREATE  OR REPLACE VIEW `nonmoderatorViewsGame` AS
SELECT G.PID, G.title, G.price
FROM game G;


-- -----------------------------------------------------
-- View `mydb`.`moderatorViewsGame`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mydb`.`moderatorViewsGame` ;
DROP TABLE IF EXISTS `mydb`.`moderatorViewsGame`;
USE `mydb`;
CREATE  OR REPLACE VIEW `moderatorViewsGame` AS
SELECT * FROM game;

-- -----------------------------------------------------
-- View `mydb`.`nonModeratorViewsUser`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mydb`.`nonModeratorViewsUser` ;
DROP TABLE IF EXISTS `mydb`.`nonModeratorViewsUser`;
USE `mydb`;
CREATE  OR REPLACE VIEW `nonModeratorViewsUser` AS
SELECT U.userID, U.name, U.userType, A.state
FROM user U, address A
WHERE (A.residentID = U.userID);

-- -----------------------------------------------------
-- View `mydb`.`moderatorViewsUser`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mydb`.`moderatorViewsUser` ;
DROP TABLE IF EXISTS `mydb`.`moderatorViewsUser`;
USE `mydb`;
CREATE  OR REPLACE VIEW `moderatorViewsUser` AS
SELECT * 
FROM user U, address A
WHERE U.userID = A.residentID;

-- -----------------------------------------------------
-- View `mydb`.`moderatorViewsReview`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mydb`.`moderatorViewsReview` ;
DROP TABLE IF EXISTS `mydb`.`moderatorViewsReview`;
USE `mydb`;
CREATE  OR REPLACE VIEW `moderatorViewsReview` AS
SELECT * FROM review;

-- -----------------------------------------------------
-- View `mydb`.`nonmoderatorViewsReview`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `mydb`.`nonmoderatorViewsReview` ;
DROP TABLE IF EXISTS `mydb`.`nonmoderatorViewsReview`;
USE `mydb`;
CREATE  OR REPLACE VIEW `nonmoderatorViewsReview` AS
SELECT R.RevID, R.authorID, R.content, R.avgRating
FROM review R;
USE `mydb`;

DELIMITER $$

USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`ratesReview_AFTER_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`ratesReview_AFTER_INSERT` AFTER INSERT ON `ratesReview` FOR EACH ROW
BEGIN
 UPDATE review 
    SET avgRating = (avgRating*numRatings) + new.rating where RevID = new.reviewID;
  UPDATE review 
    SET numRatings = 1 + numRatings where RevID = new.reviewID;
  UPDATE review 
    SET avgRating = avgRating/numRatings where RevID = new.reviewID;
END
$$


USE `mydb`$$
DROP TRIGGER IF EXISTS `mydb`.`ratesSeller_AFTER_INSERT` $$
USE `mydb`$$
CREATE DEFINER = CURRENT_USER TRIGGER `mydb`.`ratesSeller_AFTER_INSERT` AFTER INSERT ON `ratesSeller` FOR EACH ROW   
BEGIN
  UPDATE seller 
    SET avgRating = (avgRating*numRatings) + new.rating where sellerID = new.sID;
  UPDATE seller 
    SET numRatings = 1 + numRatings where sellerID = new.sID;
  UPDATE seller 
    SET avgRating = avgRating/numRatings where sellerID = new.sID;
END
$$


DELIMITER ;
SET SQL_MODE = '';
GRANT USAGE ON *.* TO customer;
 DROP USER customer;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'customer' IDENTIFIED BY 'customer';

GRANT SELECT ON TABLE `mydb`.* TO 'customer';
GRANT REFERENCES, SHOW VIEW, SELECT ON TABLE `mydb`.`nonmoderatorViewsGame` TO 'customer';
GRANT REFERENCES, SHOW VIEW, SELECT ON TABLE `mydb`.`nonmoderatorViewsReview` TO 'customer';
GRANT SHOW VIEW, REFERENCES, SELECT ON TABLE `mydb`.`nonModeratorViewsUser` TO 'customer';
GRANT SELECT, INSERT, TRIGGER ON TABLE `mydb`.* TO 'customer';
GRANT SHOW VIEW, SELECT, REFERENCES ON TABLE `mydb`.`nonmoderatorViewsGame` TO 'customer';
GRANT SHOW VIEW, SELECT, REFERENCES ON TABLE `mydb`.`nonmoderatorViewsReview` TO 'customer';
GRANT SHOW VIEW, REFERENCES, SELECT ON TABLE `mydb`.`nonModeratorViewsUser` TO 'customer';
GRANT ALL ON TABLE `mydb`.`moderatorViewsUser` TO 'customer';
GRANT ALL ON TABLE `mydb`.`moderatorViewsReview` TO 'customer';
GRANT ALL ON TABLE `mydb`.`moderatorViewsGame` TO 'customer';
SET SQL_MODE = '';
GRANT USAGE ON *.* TO moderator;
 DROP USER moderator;
SET SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';
CREATE USER 'moderator' IDENTIFIED BY 'moderator';

GRANT SELECT, INSERT, TRIGGER ON TABLE `mydb`.* TO 'moderator';
GRANT SHOW VIEW, SELECT, REFERENCES ON TABLE `mydb`.`nonmoderatorViewsGame` TO 'moderator';
GRANT SHOW VIEW, SELECT, REFERENCES ON TABLE `mydb`.`nonmoderatorViewsReview` TO 'moderator';
GRANT SHOW VIEW, REFERENCES, SELECT ON TABLE `mydb`.`nonModeratorViewsUser` TO 'moderator';
GRANT ALL ON TABLE `mydb`.`moderatorViewsUser` TO 'moderator';
GRANT ALL ON TABLE `mydb`.`moderatorViewsReview` TO 'moderator';
GRANT ALL ON TABLE `mydb`.`moderatorViewsGame` TO 'moderator';
GRANT SELECT, INSERT, TRIGGER, UPDATE, DELETE ON TABLE `mydb`.* TO 'moderator';
GRANT ALL ON TABLE `mydb`.`moderatorViewsUser` TO 'moderator';
GRANT ALL ON TABLE `mydb`.`moderatorViewsReview` TO 'moderator';
GRANT ALL ON TABLE `mydb`.`moderatorViewsGame` TO 'moderator';

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
